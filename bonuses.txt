BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers

We supported the configuration fields by using dynamic sizes that pull the numbers from env.config.
for numbers not in the config we used static final fields with NAMES_LIKE_THIS (according to the convention in java)
in order to avoid the use of magic numbers.

This was tested by changing every configuration field and seeing that the game works as expected.


--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.

We started all the player threads in the order they are in the player threads array and terminated them in
the reverse order. This is enabled by the dealer joining the player thread when terminating the player and the
player thread waiting for the AI thread before terminating. The dealer waited for each player thread 
to terminate before proceeding to the next player and finally terminated himself.

We log and print the start and termination of each thread, and it can be seen that the threads are terminated
in the correct order.


--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We supported this configuration field by implementing 3 different timer modes in dealer class.

In the dealer constructor we check the value of the configuration field and set the timer mode accordingly.
Later in the dealer run method we check the timer mode and call a different start method according to the switch case.

We tested this by changing the configuration field and seeing that the timer works as expected.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.

we have created exactly 1 thread for dealer, 1 thread for each player and 1 thread for each AI.
the dealer waits for claimsets and timer updates when needed, the player thread waits for clicks and then wakes up the 
dealer so that he will check the claimset. the baseline states for every thread is waiting.
We have allowed the AI to perform some tasks while the player thread is 'busy' in order to speed up and enhance
the AI's performance. but even then,between these tasks the AI waits for a designated period.

We log and print the start and termination of each thread, and it can be seen that there are no
redundant threads created.


